using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace OpenDictionary.CodeAnalysis.EnumToInterface;

public readonly ref struct InterfaceParser(INamedTypeSymbol symbol, AttributeSyntax attribute)
{
    public Result Parce()
    {
        string name = new InterfaceNameExtractor(attribute, defaultName: $"I{symbol.Name}")
            .Extract();

        string implementation = new Interface(name, symbol.MemberNames, SetAccessor.None)
            .CreateImplementation();

        string normalize = SyntaxTool.Normalize(implementation);

        string result = $$"""
             // <auto-generated/>
             
             #nullable enable
              
             namespace {{symbol.ContainingNamespace}};
             
             {{normalize}}
             """
        ;
        return new(name, symbol.ContainingNamespace.ToString(), result);
    }

    public readonly record struct Result(string Name, string Namespace, string Implementation);
}